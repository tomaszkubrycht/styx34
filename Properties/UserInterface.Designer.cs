//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Windows.Forms;

namespace Styx.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
    internal sealed partial class UserInterface : global::System.Configuration.ApplicationSettingsBase
    {

        private static UserInterface defaultInstance = ((UserInterface)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new UserInterface())));

        public static UserInterface Default
        {
            get
            {
                return defaultInstance;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("8")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("Value must be between 1 and 100.")]
        public double StandardNodeSize
        {
            get
            {
                return ((double)(this["StandardNodeSize"]));
            }
            set
            {
                try
                {
                    if (value >= 1 && value <= 100)
                    {
                        this["StandardNodeSize"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Black")]
        [global::System.ComponentModel.Category("Appearance")]
        public global::System.Drawing.Color StandardNodeColor
        {
            get
            {
                return ((global::System.Drawing.Color)(this["StandardNodeColor"]));
            }
            set
            {
                this["StandardNodeColor"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("Value must be between 1 and 100.")]
        public double StandardLinkThickness
        {
            get
            {
                return ((double)(this["StandardLinkThickness"]));
            }
            set
            {

                try
                {
                    if (value >= 1 && value <= 100)
                    {
                        this["StandardLinkThickness"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Black")]
        [global::System.ComponentModel.Category("Appearance")]
        public global::System.Drawing.Color StandardLinkColor
        {
            get
            {
                return ((global::System.Drawing.Color)(this["StandardLinkColor"]));
            }
            set
            {
                this["StandardLinkColor"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Red")]
        [global::System.ComponentModel.Category("Appearance")]
        public global::System.Drawing.Color SelectionNodeColor
        {
            get
            {
                return ((global::System.Drawing.Color)(this["SelectionNodeColor"]));
            }
            set
            {
                this["SelectionNodeColor"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("11")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("Value must be between 1 and 100.")]
        public double SelectionNodeSize
        {
            get
            {
                return ((double)(this["SelectionNodeSize"]));
            }
            set
            {

                try
                {
                    if (value >= 1 && value <= 100)
                    {
                        this["SelectionNodeSize"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Red")]
        [global::System.ComponentModel.Category("Appearance")]
        public global::System.Drawing.Color SelectionLinkColor
        {
            get
            {
                return ((global::System.Drawing.Color)(this["SelectionLinkColor"]));
            }
            set
            {
                this["SelectionLinkColor"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Orange")]
        [global::System.ComponentModel.Category("Appearance")]
        public global::System.Drawing.Color LoggerNodeColor
        {
            get
            {
                return ((global::System.Drawing.Color)(this["LoggerNodeColor"]));
            }
            set
            {
                this["LoggerNodeColor"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Aqua")]
        [global::System.ComponentModel.Category("Appearance")]
        public global::System.Drawing.Color LoggerInletNodeColor
        {
            get
            {
                return ((global::System.Drawing.Color)(this["LoggerInletNodeColor"]));
            }
            set
            {
                this["LoggerInletNodeColor"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("12")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("Value must be between 1 and 100.")]
        public double LoggerSelectionNodeSize
        {
            get
            {
                return ((double)(this["LoggerSelectionNodeSize"]));
            }
            set
            {

                try
                {
                    if (value >= 1 && value <= 100)
                    {
                        this["LoggerSelectionNodeSize"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("Logger connections line thickness. Value must be between 1 and 100.")]
        public double LoggerLinkThickness
        {
            get
            {
                return ((double)(this["LoggerLinkThickness"]));
            }
            set
            {

                try
                {
                    if (value >= 1 && value <= 100)
                    {
                        this["LoggerLinkThickness"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Orange")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("Logger connections line colour.")]
        public global::System.Drawing.Color LoggerLinkColor
        {
            get
            {
                return ((global::System.Drawing.Color)(this["LoggerLinkColor"]));
            }
            set
            {
                this["LoggerLinkColor"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.6")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("When pressure-stepping results are visualised logger connection thickness is changed according to absolute head-loss change. This is the minimum thickness. Value must be between 0.5 and 100.")]
        public double LoggerMinLinkThickness
        {
            get
            {
                return ((double)(this["LoggerMinLinkThickness"]));
            }
            set
            {

                try
                {
                    if (value >= 1 && value <= 100)
                    {
                        this["LoggerMinLinkThickness"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("9")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("When pressure-stepping results are visualised logger connection thickness is changed according to absolute head-loss change. This is the maximum thickness. Value must be between 1 and 100.")]
        public double LoggerMaxLinkThickness
        {
            get
            {
                return ((double)(this["LoggerMaxLinkThickness"]));
            }
            set
            {

                try
                {
                    if (value >= 1 && value <= 100)
                    {
                        this["LoggerMaxLinkThickness"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("50")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("When pressure-stepping results are visualised logger connection colour is changed according to percentage head-loss change, with red indicating increase in head-loss. This is the minimum amount of red compoment in the colour. Value must be between 0 and 255.")]
        public double LoggerMinRedComponent
        {
            get
            {
                return ((double)(this["LoggerMinRedComponent"]));
            }
            set
            {
                try
                {
                    if (value >= 0 && value <= 255)
                    {
                        this["LoggerMinRedComponent"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("255")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("When pressure-stepping results are visualised logger connection colour is changed according to percentage head-loss change, with red indicating increase in head-loss. This is the maximum amount of red compoment in the colour. Value must be between 0 and 255.")]
        public double LoggerMaxRedComponent
        {
            get
            {
                return ((double)(this["LoggerMaxRedComponent"]));
            }
            set
            {
                try
                {
                    if (value >= 0 && value <= 255)
                    {
                        this["LoggerMaxRedComponent"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("100")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("When pressure-stepping results are visualised logger connection colour is changed according to percentage head-loss change, with blue indicating decrease in head-loss. This is the minimum amount of blue compoment in the colour. Value must be between 0 and 255.")]
        public double LoggerMinBlueComponent
        {
            get
            {
                return ((double)(this["LoggerMinBlueComponent"]));
            }
            set
            {
                try
                {
                    if (value >= 0 && value <= 255)
                    {
                        this["LoggerMinBlueComponent"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("255")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("When pressure-stepping results are visualised logger connection colour is changed according to percentage head-loss change, with blue indicating decrease in head-loss. This is the maximum amount of blue compoment in the colour. Value must be between 0 and 255.")]
        public double LoggerMaxBlueComponent
        {
            get
            {
                return ((double)(this["LoggerMaxBlueComponent"]));
            }
            set
            {
                try
                {
                    if (value >= 0 && value <= 255)
                    {
                        this["LoggerMaxBlueComponent"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("20")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("When pressure-stepping results are visualised logger connection colour is changed according to percentage head-loss change, with blue indicating decrease in head-loss. This is red component when blue is changed according to percentage head-loss change. Value must be between 0 and 255.")]
        public byte LoggerStandardRedComponent
        {
            get
            {
                return ((byte)(this["LoggerStandardRedComponent"]));
            }
            set
            {
                try
                {
                    if (value >= 0 && value <= 255)
                    {
                        this["LoggerStandardRedComponent"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("20")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("When pressure-stepping results are visualised logger connection colour is changed according to percentage head-loss change, with blue indicating decrease in head-loss and red indicating increase in head-loss. This is green component when blue/red are changed according to percentage head-loss change. Value must be between 0 and 255.")]
        public byte LoggerStandardGreenComponent
        {
            get
            {
                return ((byte)(this["LoggerStandardGreenComponent"]));
            }
            set
            {
                try
                {
                    if (value >= 0 && value <= 255)
                    {
                        this["LoggerStandardGreenComponent"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("20")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("When pressure-stepping results are visualised logger connection colour is changed according to percentage head-loss change, with red indicating increase in head-loss. This is blue component when red is changed according to percentage head-loss change. Value must be between 0 and 255.")]
        public byte LoggerStandardBlueComponent
        {
            get
            {
                return ((byte)(this["LoggerStandardBlueComponent"]));
            }
            set
            {
                try
                {
                    if (value >= 0 && value <= 255)
                    {
                        this["LoggerStandardBlueComponent"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }

            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DeepPink")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("Colour of flow-paths (nodes) between loggers.")]
        public global::System.Drawing.Color PathNodeColor
        {
            get
            {
                return ((global::System.Drawing.Color)(this["PathNodeColor"]));
            }
            set
            {
                this["PathNodeColor"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("Value must be between 1 and 100.")]
        public double PathNodeSize
        {
            get
            {
                return ((double)(this["PathNodeSize"]));
            }
            set
            {
                try
                {
                    if (value >= 1 && value <= 100)
                    {
                        this["PathNodeSize"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DeepPink")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("Colour of flow-paths (pipes) between loggers.")]
        public global::System.Drawing.Color PathLinkColor
        {
            get
            {
                return ((global::System.Drawing.Color)(this["PathLinkColor"]));
            }
            set
            {
                this["PathLinkColor"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("Thickness of flow-paths between loggers. Value must be between 1 and 100.")]
        public double PathLinkThickness
        {
            get
            {
                return ((double)(this["PathLinkThickness"]));
            }
            set
            {
                try
                {
                    if (value >= 1 && value <= 100)
                    {
                        this["PathLinkThickness"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1.5")]
        [global::System.ComponentModel.Category("Appearance")]
        public double NodeLabelOffset
        {
            get
            {
                return ((double)(this["NodeLabelOffset"]));
            }
            set
            {
                this["NodeLabelOffset"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("Value must be between 1 and 100.")]
        public double LoggerNodeSize
        {
            get
            {
                return ((double)(this["LoggerNodeSize"]));
            }
            set
            {
                try
                {
                    if (value >= 1 && value <= 100)
                    {
                        this["LoggerNodeSize"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2")]
        [global::System.ComponentModel.Category("Appearance")]
        [global::System.ComponentModel.Description("Thickness of selected link (pipe). Value must be between 1 and 100.")]
        public double SelectionLinkThickness
        {
            get
            {
                return ((double)(this["SelectionLinkThickness"]));
            }
            set
            {
                try
                {
                    if (value >= 1 && value <= 100)
                    {
                        this["SelectionLinkThickness"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.005")]
        [global::System.ComponentModel.Category("Advanced options")]
        [global::System.ComponentModel.Description("Value below which it is assumed that the flow is zero.")]
        public double ZeroFlowTolerance
        {
            get
            {
                return ((double)(this["ZeroFlowTolerance"]));
            }
            set
            {
                this["ZeroFlowTolerance"] = value;
            }
        }
                
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.001")]
        [global::System.ComponentModel.Category("Advanced options")]
        [global::System.ComponentModel.Description("If absolute head-loss change is smaller than this value then it is considered zero. ")]
        public double ZeroD2HTtolerance
        {
            get
            {
                return ((double)(this["ZeroD2HTtolerance"]));
            }
            set
            {
                this["ZeroD2HTtolerance"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.0006")]
        [global::System.ComponentModel.Category("Advanced options")]
        [global::System.ComponentModel.Description("Burst size estimation parameter: during estimation LSQR algorithm stops when normalized average error percentage is smaller than this tolerance. ")]
        public double LeastSquareEstimationTolerance
        {
            get
            {
                return ((double)(this["LeastSquareEstimationTolerance"]));
            }
            set
            {
                this["LeastSquareEstimationTolerance"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1000")]
        [global::System.ComponentModel.Category("Advanced options")]
        [global::System.ComponentModel.Description("Burst size estimation parameter: maximum number of iterations for the LSQR algorithm. ")]
        public int LeastSquareEstimationIterations
        {
            get
            {
                return ((int)(this["LeastSquareEstimationIterations"]));
            }
            set
            {
                this["LeastSquareEstimationIterations"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("20")]
        [global::System.ComponentModel.Category("Advanced options")]
        [global::System.ComponentModel.Description("Burst size estimation parameter: maximum difference (as percentage of the smallest chi^2) of chosen set from the smallest chi^2. ")]
        public double MaximumDifferenceFromMinChi2Percentage
        {
            get
            {
                return ((double)(this["MaximumDifferenceFromMinChi2Percentage"]));
            }
            set
            {
                this["MaximumDifferenceFromMinChi2Percentage"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3")]
        [global::System.ComponentModel.Category("Advanced options")]
        [global::System.ComponentModel.Description("Burst size estimation parameter: maximum number of sets of coefficients selected to calculate average coefficients. ")]
        public int MaximumNumberOfMinChi2
        {
            get
            {
                return ((int)(this["MaximumNumberOfMinChi2"]));
            }
            set
            {
                this["MaximumNumberOfMinChi2"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2")]
        [global::System.ComponentModel.Category("Advanced options")]
        [global::System.ComponentModel.Description("Maximum allowed value of parameter LoggerNeighbourhoodLevel, i.e. level of higher-level neighbours which are used for loggers connectivity calculations. ")]
        public int MaximumForHigherLevelNeighbours
        {
            get
            {
                return ((int)(this["MaximumForHigherLevelNeighbours"]));
            }
            set
            {
                this["MaximumForHigherLevelNeighbours"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        [global::System.ComponentModel.Category("Advanced options")]
        [global::System.ComponentModel.Description("When loggers connectivity is analysed and the flow-path constructing algorithm arrives at logger's neighbour, it is assumed that it has arrived at this logger; this variable determines the level of neighbourhood: 0=only when we arrive at a logger itself, 1=when we arrive at a direct neighbour, 2=when we arrive at 2nd level neighbour (i.e. separated by 1 node) etc. ")]
        public int LoggerNeighbourhoodLevel
        {
            get
            {
                return ((int)(this["LoggerNeighbourhoodLevel"]));
            }
            set
            {
                this["LoggerNeighbourhoodLevel"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.1")]
        [global::System.ComponentModel.Category("Advanced options")]
        [global::System.ComponentModel.Description("When loggers connectivity is analysed and the flow-path constructing algorithm arrives at logger's neighbour, it is assumed that it has arrived at this logger only if absolute head difference between the neighbour and the logger is smaller than this value. ")]
        public double HeadDifferenceTolerance
        {
            get
            {
                return ((double)(this["HeadDifferenceTolerance"]));
            }
            set
            {
                this["HeadDifferenceTolerance"] = value;
            }
        }


        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1.1")]
        [global::System.ComponentModel.Category("Zooming")]
        [global::System.ComponentModel.Description("Value must be bigger than 1 and less than 2.")]
        public double ZoomInStep
        {
            get
            {
                return ((double)(this["ZoomInStep"]));
            }
            set
            {
                try
                {
                    if (value > 1 && value < 2)
                    {
                        this["ZoomInStep"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value. Value must be bigger than 1 and less than 2."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1.1")]
        [global::System.ComponentModel.Category("Zooming")]
        [global::System.ComponentModel.Description("Value must be bigger than 1 and less than 2.")]
        public double ZoomOutStep
        {

            get
            {
                return ((double)(this["ZoomOutStep"]));
            }
            set
            {
                try
                {
                    if (value > 1 && value < 2)
                    {
                        this["ZoomOutStep"] = value;
                    }
                    else { throw new ArgumentOutOfRangeException("Invalid value. Value must be bigger than 1 and less than 2."); }
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }

        }
    }
}